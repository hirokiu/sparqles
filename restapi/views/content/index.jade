-// see http://semapps.blogspot.ie/2012/05/sparql-query-from-javascript.html
-// TODO update Avail data
-// TODO update Perf data
-// TODO update Interop data
-// TODO update Distrib data
extends ../layout
block content
      section#post
        article
          header.wrpl.w-3-3
            h1
              | SPARQL Endpoints Status !{configInstanceTitle}
            time Last update: #{new Date(lastUpdate)}
            details
              summary Description:
              p SPARQL Endpoints Status tool monitors the availability, performance, interoperability and discoverability of SPARQL Endpoints registered in Datahub.
              p
                | Your endpoint is not in this list? Please consider adding it to the relevant dataset in Datahub.
      .line
      section#posts.default-area
        .col-2.clear
          article.wrpl(style='min-width: 400px;')
            .wrplInnerBox(style='height: 380px;')
              a(title='', href='./availability')
                h2 
                  span(onmouseover='tooltip.show(\'#{configAvailability["availability"]}\')', onmouseout='tooltip.hide();') Availability
              svg#avail(style='height: 350px; padding-right:10px;')
          article.wrpl(style='min-width: 400px;')
            .wrplInnerBox(style='height: 380px;')
              - function numberWithCommas(x) {if (x) return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");}
              a(title='', href='./performance')
                h2 
                  span(onmouseover='tooltip.show(\'#{configPerformance["performance"]}\')', onmouseout='tooltip.hide();') Performance
              span
                b #{numberWithCommas(perf.threshold)} 
                | is the most common 
                span(onmouseover='tooltip.show(\'#{configPerformance["Result-size thresholds"]}\')', onmouseout='tooltip.hide();') result-size threshold
              svg#perf
          article.wrpl(style='min-width: 400px;')
            .wrplInnerBox(style='height: 380px;')
              a(title='', href='./interoperability')
                h2#log
                  span(onmouseover='tooltip.show(\'#{configInterop["interoperability"]}\')', onmouseout='tooltip.hide();') Interoperability
              svg#interop
          article.wrpl(style='min-width: 400px;')
            .wrplInnerBox(style='height: 380px;')
              a(title='', href='./discoverability')
                h2 
                  span(onmouseover='tooltip.show(\'#{configDisco["discoverability"]}\')', onmouseout='tooltip.hide();') Discoverability
              div
                b #{parseFloat((nbEndpointsVoID/nbEndpointsTotal*100).toFixed(2))+ '%'} 
                | of the endpoints provide a 
                span(onmouseover='tooltip.show(\'#{configDisco["VoID Description"]}\')', onmouseout='tooltip.hide();') VoID description
              div
                b #{parseFloat((nbEndpointsSD/nbEndpointsTotal*100).toFixed(2))+ '%'} 
                | of the endpoints provide a 
                span(onmouseover='tooltip.show(\'#{configDisco["Service Description"]}\')', onmouseout='tooltip.hide();') SD description
              div
                b #{parseFloat((nbEndpointsNoDesc/nbEndpointsTotal*100).toFixed(2))+ '%'} 
                | of the endpoints have 
                b no 
                | description
              br
              span(onmouseover='tooltip.show(\'#{configDisco["Server Name"]}\')', onmouseout='tooltip.hide();') Server name:
              svg#disco(style='height: 350px;margin-top:-50px;')
      script.
        var colors = d3.scale.category20();
        keyColor = function(d, i) {return colors(d.key)};
        
        // Availability
        nv.addGraph(function() {
          var chart = nv.models.stackedAreaChart()
            .x(function(d) { return d[0] })
            .y(function(d) { return d[1] })
            //.yDomain([0,1])
            .color(keyColor)
            .showControls(false);
            //.clipEdge(true);
          
          //chart.xAxis.tickFormat(function(d) { return d3.time.format('%Y-%m')(new Date(d)) });
          //make sure everyone has the same time displayed.
          chart.xAxis.tickFormat(function(d) { return d3.time.format('%Y-%m')(new Date(d+ ((new Date().getTimezoneOffset()+60) * 60000))) });
          chart.yAxis.tickFormat(d3.format('.0f'));
          
          d3.select('#avail')
            .datum(!{JSON.stringify(amonths)})
            .call(chart);
          
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        
        // Performance
        nv.addGraph(function() {
          var chart = nv.models.multiBarHorizontalChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .margin({top: 0, right: 20, bottom: 50, left: 80})
              .showValues(true)
              .showControls(false)
              .barColor(d3.scale.category20().range());
          chart.yAxis.tickFormat(function (d) {
                  return d3.format(',.2f')(d) + ' s';
                });
          d3.select('#perf')
              .datum(!{JSON.stringify(perf.data)})
              .transition().duration(500)
              .call(chart);
          var confPerf = !{JSON.stringify(configPerformance)}
          d3.select('#perf')
            .selectAll('.tick.major text')
            .on('mouseover',function(d){tooltip.show(confPerf[d]);})
            .on('mouseout',function(d){tooltip.hide();});
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        nv.addGraph(function() {
          var chart = nv.models.multiBarHorizontalChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .margin({top: 0, right: 20, bottom: 50, left: 185})
              .showValues(true)
              .valueFormat(d3.format('.2%'))
              .forceY([0,1])
              .showControls(false);
          chart.yAxis
              .tickFormat(d3.format('.0%'));
          d3.select('#interop')
              .datum(!{JSON.stringify(indexInterop)})
              .transition().duration(500)
              .call(chart);
          var confInterop = !{JSON.stringify(configInterop)}
          d3.select('#interop')
            .selectAll('.tick.major text')
            .on('mouseover',function(d){tooltip.show(confInterop[d]);})
            .on('mouseout',function(d){tooltip.hide();});
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        nv.addGraph(function() {
          var chart = nv.models.pieChart()
            .x(function(d) { return d.label })
            .y(function(d) { return d.value })
            .values(function(d) { return d })
            .valueFormat(d3.format('.2%'))
            .showLegend(false)
            .height(550)
            .color(d3.scale.category10().range())
            .margin({top: 0, right: 5, bottom: 40, left: 0})
            .donut(true);
          chart.pie
            .startAngle(function(d) { return d.startAngle/2 -Math.PI/2 })
            .endAngle(function(d) { return d.endAngle/2 -Math.PI/2 });
          d3.select("#disco")
            .datum([!{JSON.stringify(index.discoverability.serverName[0].values)}])
            .transition().duration(500)
            .call(chart);
          nv.utils.windowResize(chart.update);
          return chart;
        });
