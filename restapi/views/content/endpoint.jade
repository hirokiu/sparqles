-// TODO INTEROP sort features by name
-// TODO AVAIL update graph data
-// TODO DISCO update data
extends ../layout
block content
      section#post
        article
          header.wrpl.w-3-4
            h1
              a(href="/endpoint?uri=#{encodeURIComponent(epUri)}") #{epUri}
              
            time 
              if epDetails.datasets.length>1
                | Datasets: 
                ul
                - each dataset, i in epDetails.datasets
                  li
                    a(href="#{epDetails.datasets[i].uri}", target="_blank") #{epDetails.datasets[i].label}
              else
                | Dataset:  
                a(href="#{epDetails.datasets[0].uri}", target="_blank") #{epDetails.datasets[0].label}
      .line
      section#posts.default-area
          article.wrpl(style='min-width: 400px; width:100%;')
            div(style="height:400px;", class='wrplInnerBox')
              a(title='', href='/availability')
                h2(style="float:left;") Availability
                span(style="float:right;") Last Day (
                  b #{parseFloat((epAvail.uptimeLast24h*100).toFixed(2))+ '%'}
                  span ); last Week (
                  b #{parseFloat((epAvail.uptimeLast7d*100).toFixed(2))+ '%'}
                  span ); last Month (
                  b #{parseFloat((epAvail.uptimeLast31d*100).toFixed(2))+ '%'}
                  span ); overall (
                  b #{parseFloat((epAvail.uptimeOverall*100).toFixed(2))+ '%'}
                  span )
              svg#chartAvail(style='height: 370px; padding-right:10px;')
          article.wrpl(style='min-width: 400px; width:100%;')
            - function numberWithCommas(x){return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");}
            div(style="height:400px;", class="wrplInnerBox")
              a(title='', href='/performance')
                h2(style="float:left;") Performance
                if epPerf.threshold>0  && epPerf.threshold%100==0
                  span(style='float:right;', onmouseover='tooltip.show(\'#{configPerf["Result-size thresholds"]}\')', onmouseout='tooltip.hide();') Suspected Result size threshold: 
                    b #{numberWithCommas(epPerf.threshold)}
              table(style='width:100%')
                tr
                  td
                    svg#chartPerformanceAsk(style='float:left; height: 370px;')
                  td
                    svg#chartPerformanceJoin(style='float:left; height: 370px;')
          article.wrpl(style='min-width: 400px; width:100%;')
            div(class="wrplInnerBoxNoHeight")
              a(title='', href='/interoperability')
                h2(style="float:left;") Interoperability
              table#table_current.psp-table(cellspacing='0', cellpadding='0', border='0', width='100%')
                tr
                  td(valign='top', style='width:50%; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0', width='100%')
                      thead
                        tr
                          th.tablehead(colspan=2) 
                            span(onmouseover='tooltip.show(\'#{configInterop["SPARQL 1.0"]}\')', onmouseout='tooltip.hide();') SPARQL 1.0 features
                      tbody
                        - each feature, i in epInterop.SPARQL1Features
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td
                              span(onmouseover='tooltip.show(\'#{configInterop[feature.label]}\')', onmouseout='tooltip.hide();') #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='/images/green.png')
                              else
                                img(src='/images/red.png', onmouseover='tooltip.show(\'#{JSON.stringify(feature.exception.string)}\')', onmouseout='tooltip.hide();')
                  td(valign='top', style='width:50%; padding: 0em 2em')
                    table#table_current.psp-table(cellspacing='0', cellpadding='0', border='0', width='100%')
                      thead
                        tr
                          th.tablehead(colspan=2)
                            span(onmouseover='tooltip.show(\'#{configInterop["SPARQL 1.1"]}\')', onmouseout='tooltip.hide();') SPARQL 1.1 features
                      tbody
                        - each feature, i in epInterop.SPARQL11Features
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td
                              span(onmouseover='tooltip.show(\'#{configInterop[feature.label]}\')', onmouseout='tooltip.hide();') #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='/images/green.png')
                              else
                                img(src='/images/red.png', onmouseover='tooltip.show(\' #{JSON.stringify(feature.exception.string)} \')', onmouseout='tooltip.hide();')
          article.wrpl(style='min-width: 400px; width:100%;')
            div.wrplInnerBoxNoHeight
              a(title='', href='/discoverability')
                h2 Discoverability
              div 
               table#table_current.psp-table(cellspacing='0', cellpadding='0', border='0', width='100%')
                tr
                  td(valign='top', style='width:33%;; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0', style='margin-left:1em;')
                      thead
                        tr
                          th.tablehead 
                            span(onmouseover='tooltip.show(\'#{configDisco["Server Name"]}\')', onmouseout='tooltip.hide();') Server Name
                      tbody
                        tr
                          td
                            span "
                              b #{epDisco.serverName}
                              " server name has been detected in the HTTP Get response header
                  td(valign='top', style='width:33%;; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0', style='margin-left:1em;')
                      thead
                        tr
                          th.tablehead 
                            span(onmouseover='tooltip.show(\'#{configDisco["VoID Description"]}\')', onmouseout='tooltip.hide();') VoID Description
                          th.tablehead 
                      tbody
                        - each feature, i in epDisco.VoIDDescription
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td
                              span(onmouseover='tooltip.show(\'#{configDisco[feature.label]}\')', onmouseout='tooltip.hide();') #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='/images/green.png')
                              else
                                img(src='/images/red.png')
                  td(valign='top', style='width:33%; padding: 0em 2em;')
                    table#table_current(cellspacing='0', cellpadding='0', border='0', style='margin-left:1em;')
                      thead
                        tr
                          th.tablehead 
                            span(onmouseover='tooltip.show(\'#{configDisco["Service Description"]}\')', onmouseout='tooltip.hide();') Service Description
                          th.tablehead 
                      tbody
                        - each feature, i in epDisco.SDDescription
                          tr(class=(i % 2 == 0) ? 'odd' : 'even')
                            td 
                              span(onmouseover='tooltip.show(\'#{configDisco[feature.label]}\')', onmouseout='tooltip.hide();') #{feature.label}
                            td.tdcenter
                              if feature.value
                                img(src='/images/green.png')
                              else
                                img(src='/images/red.png')
      script.
        var colors = d3.scale.category20();
        keyColor = function(d, i) {return colors(d.key)};
        nv.addGraph(function() {
          var chart = nv.models.stackedAreaChart()
            .x(function(d) { return d.x })
            .y(function(d) { return d.y })
            .color(keyColor)
            .showControls(false)
            .showLegend(false)
            .yDomain([0,1]);
          chart.xAxis.tickFormat(function(d) { return d3.time.format('%Y-%m-%d')(new Date(d + ((new Date().getTimezoneOffset()+60) * 60000))) });
          chart.yAxis.tickFormat(d3.format('.2%'));
          d3.select('#chartAvail')
            .datum(!{'[{"key":"Availability","values":'+JSON.stringify(epAvail.data.values.sort(function(a,b){return parseFloat(a.x)-parseFloat(b.x)}))+'}]'})
            .call(chart);
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        var confPerf = !{JSON.stringify(configPerf)}
        nv.addGraph(function() {
          var chart = nv.models.multiBarHorizontalChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .margin({top: 30, right: 20, bottom: 50, left: 30})
              .showValues(true)
              .showControls(false)
              .barColor(d3.scale.category20().range());
          chart.yAxis
              .tickFormat(d3.format(',.2f'));
          d3.select('#chartPerformanceAsk')
              .datum(!{JSON.stringify(epPerf.ask)})
              .transition().duration(500)
              .call(chart);
          d3.select('#chartPerformanceAsk')
            .selectAll('.tick.major text')
            .on('mouseover',function(d){tooltip.show(confPerf['ASK'+d]);})
            .on('mouseout',function(d){tooltip.hide();});
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
        nv.addGraph(function() {
          var chart = nv.models.multiBarHorizontalChart()
              .x(function(d) { return d.label })
              .y(function(d) { return d.value })
              .margin({top: 30, right: 20, bottom: 50, left: 30})
              .showValues(true)
              .barColor(d3.scale.category20().range())
              .showControls(false);
          chart.xAxis.axisLabel('s');
          chart.yAxis
              .tickFormat(d3.format(',.2f'));
          d3.select('#chartPerformanceJoin')
              .datum(!{JSON.stringify(epPerf.join)})
              .transition().duration(500)
              .call(chart);
          d3.select('#chartPerformanceJoin')
            .selectAll('.tick.major text')
            .on('mouseover',function(d){tooltip.show(confPerf['JOIN'+d]);})
            .on('mouseout',function(d){tooltip.hide();});
          nv.utils.windowResize(chart.update);
          chart.dispatch.on('stateChange', function(e) { nv.log('New State:', JSON.stringify(e)); });
          return chart;
        });
